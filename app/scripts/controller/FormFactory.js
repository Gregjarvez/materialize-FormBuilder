import React from "react"import last from "lodash/last";import fromPairs from "lodash/fromPairs";class InputFactory extends React.Component {    constructor(props){        super(props);            }    setToolTip() {        return this.setState({tooltip : true});    }    removeTooltip() {        return this.setState({tooltip: false});    }        toggleEdit(){        return this.setState(prevState => {            return {editTab: !prevState.editTab}        })    }    destruct(id) {        return this.props.del(id)    }    handleSubmit(data){        let prop;        for( prop in data){            this.setState({[prop] : data[prop]})        }        return false;    }            constructSetting(object, array){        let BuildData = Object.assign({}, object);        array.forEach((each, index) => delete BuildData[each]);        return BuildData;    }    processClass(data) {        let classString, className, classDef, definitionGroup;        classString = data;        className = classString.substring(0, classString.indexOf("{"));        classDef = classString.substring((classString.indexOf("{") + 1), classString.indexOf("}"));        definitionGroup = classDef.split(";").map((each) => {            return each.trim().split(":");        });        return {            definitionGroup,            className        }    }    getClassObject(data) {        let styles;        //todo update UpdateClassName if changed on editor        let {definitionGroup} = this.processClass(data)        if (last(definitionGroup)[0] === "") {            definitionGroup.pop()        }        styles = fromPairs(definitionGroup);        return this.setState({            styles: styles        })    }    render(){        return null;    }}export default InputFactory