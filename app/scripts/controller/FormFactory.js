import React from "react"import last from "lodash/last";import fromPairs from "lodash/fromPairs";class InputFactory extends React.Component {    segregated(array) {        let str, index, formatted, characterAfterIndex, regex;        str = array.join("")        index = array.findIndex(each => each === "-") + 1;        characterAfterIndex = str.charAt(index);                formatted = str.replace(`-${characterAfterIndex}`, characterAfterIndex.toUpperCase())        console.log(formatted);        return formatted;    }    transformProperty(property) {        let string = property;        string = this.segregated([...string])        return string;    }    validateCss(style) {        let validated = {}, formatted;        for (let [property, value] of Object.entries(style)) {            if (CSS.supports(property, value)) {                if (property.includes("-")) {                    property = this.transformProperty(property);                }                formatted = {[property]: value.trim()}                Object.assign(validated, formatted)            }        }        return validated;    }    processClass(data) {        let classString, className, classDef, definitionGroup;        classString = data;        className = classString.substring(0, classString.indexOf("{"));        classDef = classString.substring((classString.indexOf("{") + 1), classString.indexOf("}"));        definitionGroup = classDef.split(";").map((each) => {            return each.trim().split(":");        });        return {            definitionGroup,            className        }    }    getClassObject(data) {        let styles, formatted;        //todo update UpdateClassName if changed on editor        let {definitionGroup} = this.processClass(data)                if (last(definitionGroup)[0] === "") {            definitionGroup.pop()        }                styles = fromPairs(definitionGroup);        formatted  = this.validateCss(styles);        return this.setState({styles : formatted});    }    setToolTip() {        return this.setState({tooltip: true});    }    removeTooltip() {        return this.setState({tooltip: false});    }    toggleEdit() {        return this.setState(prevState => {            return {editTab: !prevState.editTab}        })    }    destruct(id) {        return this.props.del(id)    }    handleSubmit(data) {        let prop;        for (prop in data) {            this.setState({[prop]: data[prop]})        }        return false;    }    constructSetting(object, array) {        let BuildData = Object.assign({}, object);        array.forEach((each, index) => delete BuildData[each]);        return BuildData;    }    render() {        return null;    }}export default InputFactory